@Online{verilator,
  author = {Snyder, Wilson and {contributors}},
  title = {{Verilator, FOSS tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC}},
  url = {https://www.veripool.org/verilator/},
  year = {2003},
}

@InProceedings{wolf13,
  author = {Wolf, Clifford and Glaser, Johann},
  title = {{A Free Verilog Synthesis Suite}},
  booktitle = {Proceedings of Austrochip 2013},
  year = {2013},
  url = {https://yosyshq.net/yosys/}
}

@Online{gh:yosys,
  author = {Wolf, Claire and {contributors}},
  title  = {{Yosys Open SYnthesis Suite}},
  url    = {https://github.com/YosysHQ/yosys},
}

@Online{gh:symbiyosys,
  author = {Wolf, Claire and {contributors}},
  title  = {{SymbiYosys: front-end for Yosys-based formal verification flows}},
  url    = {https://github.com/YosysHQ/SymbiYosys},
}

@Online{gh:nextpnr,
  author = {gatecat and {contributors}},
  title  = {{nextpnr: portable FPGA place and route tool}},
  url    = {https://github.com/YosysHQ/nextpnr},
}

@Online{gh:gtkwave,
  author = {Bybell, Tony and {contributors}},
  title  = {{GTKWave: a is a fully featured GTK+ based wave viewer for Unix, Win32, and Mac OSX}},
  url    = {https://github.com/gtkwave/gtkwave},
  year   = {1998},
}

@Online{gh:ghdl,
  author = {Gingold, Tristan and {contributors}},
  title  = {{GHDL: open-source analyzer, compiler, simulator and (experimental) synthesizer for VHDL}},
  url    = {https://github.com/ghdl/ghdl},
  month  = {Sep},
  year   = {2003},
}

@Online{gh:ghdl-yosys-plugin,
  author = {Gingold, Tristan and {contributors}},
  title  = {{ghdl-yosys-plugin: VHDL synthesis (based on ghdl and yosys)}},
  url    = {https://github.com/ghdl/ghdl-yosys-plugin},
  year   = {2017},
}

@Online{gh:pyVHDLParser,
  author = {Lehmann, Patrick},
  year = {2017},
  title = {{pyVHDLParser, a token-stream based parser for VHDL-2008}},
  url = {https://github.com/Paebbels/pyVHDLParser},
}

@Online{gh:pyIPCMI,
  author = {Lehmann, Patrick},
  year = {2018},
  title = {{pyIPCMI: a Python-based IP Core Management Infrastructure}},
  url = {https://github.com/Paebbels/pyIPCMI},
}

@Online{gh:tsfpga,
  author = {Vik, Lukas and {contributors}},
  title = {{tsfpga: a project platform for modern FPGA development}},
  url = {https://gitlab.com/tsfpga/tsfpga},
}

@Online{gh:PyFPGA,
  author = {Melo, Rodrigo A.},
  year = {2019},
  title = {{PyFPGA: a Python package to use FPGA development tools programmatically}},
  url = {https://github.com/PyFPGA/pyfpga},
}

@Online{gh:Xeda,
  author = {Mohajerani, Kamyar and {contributors}},
  year = {2020},
  title = {{Xeda: cross EDA Abstraction and Automation}},
  url = {https://github.com/XedaHQ/xeda},
}

@Online{sphinx,
  author = {Brandl, Georg and KOMIYA, Takeshi and {contributors}},
  year = {2007},
  title = {{Sphinx, Python Documentation Generator}},
  url = {https://www.sphinx-doc.org},
}

@Online{verible,
  author = {Fang, David and Zeller, Henner and {contributors}},
  year = {2019},
  title = {{Verible, a suite of SystemVerilog developer tools, including a parser, style-linter, and formatter}},
  url = {https://chipsalliance.github.io/verible/},
}

@Online{surelog,
  author = {Dargelas, Alain and Zeller, Henner and {contributors}},
  year = {2019},
  title = {{Surelog, SystemVerilog 2017 Pre-processor, Parser, Elaborator, UHDM Compiler}},
  url = {https://github.com/alainmarcel/Surelog/},
}

@inproceedings{dargelas20,
  title = {{Universal Hardware Data Model}},
  author = {Dargelas, Alain and Zeller, Henner},
  booktitle = {Workshop on Open-Source EDA Technology 2020 (WOSET)},
  year = {2020},
  month = {10},
  url = {https://woset-workshop.github.io/PDFs/2020/a10.pdf}
}

@Online{iverilog,
  author={Williams, Stephen and {contributors}},
  title={{Icarus Verilog, a Verilog simulation and synthesis tool}},
  url={http://iverilog.icarus.com/}
}

@Online{gh:fusesoc,
  author = {Kindgren, Olof and {contributors}},
  title  = {{FuseSoC: package manager and build abstraction tool for FPGA/ASIC development}},
  url    = {https://github.com/olofk/fusesoc},
  year   = {2011},
}

@Online{gh:edalize,
  author = {Kindgren, Olof and {contributors}},
  title  = {{Edalize: an abstraction library for interfacing EDA tools}},
  url    = {https://github.com/olofk/edalize},
  year   = {2018},
}

@InProceedings{ansell20,
  author = {Ansell, Tim and Saligane, Mehdi},
  booktitle = {2020 IEEE/ACM International Conference On Computer Aided Design (ICCAD)},
  title = {{The Missing Pieces of Open Design Enablement: A Recent History of Google Efforts : Invited Paper}},
  year = {2020},
  pages = {1-8},
  url = {https://dl.acm.org/doi/abs/10.1145/3400302.3415736}
}

@Online{osvvm,
  author = {Lewis, Jim and {contributors}},
  title  = {{Open Source VHDL Verification Methodology (OSVVM)}},
  url    = {https://osvvm.org/},
  month  = {May},
  year   = {2013},
}

@Online{gh:osvvmscripts,
  author = {Lewis, Jim and {contributors}},
  title  = {{OSVVM project simulation scripts}},
  url    = {https://github.com/OSVVM/OSVVM-Scripts},
}

@Online{cocotb,
  author = {
    Higgs, Chris and
    Hodgson, Stuart and
    {contributors}
  },
  year = {2013},
  month = {Jun},
  title = {{Coroutine Cosimulation TestBench (cocotb)}},
  url = {https://github.com/cocotb/cocotb},
}

@Online{uvvm,
  author = {Tallaksen, Espen and {contributors}},
  year = {2013},
  month = {Sep},
  title = {{Universal VHDL Verification Methodology (UVVM)}},
  url = {https://uvvm.org/},
}

@Online{vunit,
  author = {
    Asplund, Lars and
    Kraigher, Olof and
    {contributors}
  },
  title  = {{VUnit: a unit testing framework for VHDL/SystemVerilog}},
  url    = {http://vunit.github.io},
  month  = {Sep},
  year   = {2014},
}

@Online{osvb,
  author = {Martinez-Corral, Unai and {contributors}},
  title  = {{Open Source Verification Bundle (OSVB)}},
  url    = {https://umarcor.github.io/osvb},
  month  = {March},
  year   = {2021},
}

@Online{gh:JSON-for-VHDL,
  author       = {Lehmann, Patrick},
  title        = {{A JSON library implemented in VHDL}},
  url          = {https://github.com/Paebbels/JSON-for-VHDL},
  month        = {Aug},
  year         = {2015},
}

@Online{github-facts,
  author = {Asplund, Lars and Martinez-Corral, Unai},
  title = {{GitHub Facts About the HDL Industry}},
  year = {2020},
  url = {https://larsasplund.github.io/github-facts}
}

@Online{gcc,
  author = {Stallman, Richard and {contributors}},
  year = {1987},
  title = {{GCC, the GNU Compiler Collection}},
  url = {http://gcc.gnu.org/},
  month = {May},
}

@Online{gdb,
  author = {Stallman, Richard and {GNU Project}},
  year = {1986},
  title = {{GDB: The GNU Project Debugger}},
  url = {https://www.gnu.org/software/gdb/},
}

@Online{llvm,
  author = {
    Adve, Vikram and
    Lattner, Chris and
    {LLVM Developer Group}
  },
  title = {{LLVM Project, a collection of modular and reusable compiler and toolchain technologies}},
  url = {https://www.llvm.org/},
  year = {2003},
}

@Online{gh:wavedrom,
  author = {Chapyzhenka, Aliaksei and {contributors}},
  title  = {{Wavedrom, digital timing diagram rendering engine}},
  url    = {https://github.com/wavedrom/wavedrom},
  year   = {2014},
}

@Online{gh:rust_hdl,
  author = {Kraigher, Olof and {contributors}},
  year = {2018},
  title = {{rust\_hdl, a collection of HDL related tools}},
  url = {https://github.com/kraigher/rust_hdl},
}

@inproceedings{schuiki20,
  author = {
    Schuiki, Fabian and
    Kurth, Andreas and
    Grosser, Tobias and
    Benini, Luca
  },
  title = {{LLHD: A Multi-Level Intermediate Representation for Hardware Description Languages}},
  year = {2020},
  isbn = {9781450376136},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3385412.3386024},
  doi = {10.1145/3385412.3386024},
  abstract = {Modern Hardware Description Languages (HDLs) such as SystemVerilog or VHDL are, due to their sheer complexity, insufficient to transport designs through modern circuit design flows. Instead, each design automation tool lowers HDLs to its own Intermediate Representation (IR). These tools are monolithic and mostly proprietary, disagree in their implementation of HDLs, and while many redundant IRs exists, no IR today can be used through the entire circuit design flow. To solve this problem, we propose the LLHD multi-level IR. LLHD is designed as simple, unambiguous reference description of a digital circuit, yet fully captures existing HDLs. We show this with our reference compiler on designs as complex as full CPU cores. LLHD comes with lowering passes to a hardware-near structural IR, which readily integrates with existing tools. LLHD establishes the basis for innovation in HDLs and tools without redundant compilers or disjoint IRs. For instance, we implement an LLHD simulator that runs up to 2.4\texttimes{} faster than commercial simulators but produces equivalent, cycle-accurate results. An initial vertically-integrated research prototype is capable of representing all levels of the IR, implements lowering from the behavioural to the structural IR, and covers a sufficient subset of SystemVerilog to support a full CPU design.},
  booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages = {258â€“271},
  numpages = {14},
  keywords = {hardware description languages, intermediate representations, transformation passes},
  location = {London, UK},
  series = {PLDI 2020}
}

@Online{symbolator,
  author = {Thibedeau, Kevin},
  title = {{Symbolator, a component diagramming tool for VHDL and Verilog}},
  url = {https://kevinpt.github.io/symbolator},
}

@Online{openroad-web,
  title = {{OpenROAD}},
  url = {https://theopenroadproject.org/},
}

@InProceedings{openroad,
  author = {
    Ajayi, Tutu and
    Blaauw, D. and
    Chan, T.-B. and
    Cheng, CK and
    Chhabria, Vidya A. and
    Choo, Daniel K. and
    Coltella, Matteo and
    Dreslinski, Ronald and
    FogaÃ§a, Mateus and
    Hashemi, Seyedpedram and
    Ibrahim, Abeba and
    Kahng, Andrew B. and
    Kim, Meesun and
    Li, Jie and
    Liang, Zhengli and
    Mallappa, Uday and
    Penzes, Peter and
    Pradipta, Geraldo and
    Reda, S. and
    Rovinski, Austin and
    Samadi, Kambiz and
    Sapatnekar, Sachin S. and
    Saul, L. and
    Sechen, Carl and
    Srinivas, Vegi and
    Swartz, Wendy and
    Sylvester, Delyse and
    Urquhart, Danny and
    Wang, Ling-song and
    Woo, Maverick and
    Xu, B.
  },
  booktitle = {Proc. Government Microcircuit Applications and Critical Technology Conference (GOMACTech)},
  title = {{OpenROAD: Toward a Self-Driving, Open-Source Digital Layout Implementation Tool Chain}},
  year = {2019},
  url = {https://par.nsf.gov/servlets/purl/10171024}
}

@InProceedings{rovinski20,
  author={
    Rovinski, Austin and
    Ajayi, Tutu and
    Kim, Minsoo and
    Wang, Guanru and
    Saligane, Mehdi
  },
  booktitle={2020 IEEE/ACM International Conference On Computer Aided Design (ICCAD)},
  title={{Bridging Academic Open-Source EDA to Real-World Usability}},
  year={2020},
  pages={1-7},
  url={https://dl.acm.org/doi/10.1145/3400302.3415734}
}

@Article{murray20micro,
  author={
    Murray, Kevin E. and
    Elgammal, Mohamed A. and
    Betz, Vaughn and
    Ansell, Tim and
    Rothman, Keith and
    Comodi, Alessandro
  },
  journal={IEEE Micro},
  title={{SymbiFlow and VPR: An Open-Source Design Flow for Commercial and Novel FPGAs}},
  year={2020},
  volume={40},
  number={4},
  pages={49-57},
  doi={10.1109/MM.2020.2998435}
}

@Article{murray20acm,
  author = {
    Murray, Kevin E. and
    Petelin, Oleg and
    Zhong, Sheng and
    Wang, Jia Min and
    Eldafrawy, Mohamed and
    Legault, Jean-Philippe and
    Sha, Eugene and
    Graham, Aaron G. and
    Wu, Jean and
    Walker, Matthew J. P. and
    Zeng, Hanqing and
    Patros, Panagiotis and
    Luu, Jason and
    Kent, Kenneth B. and
    Betz, Vaughn
  },
  title = {{VTR 8: High-Performance CAD and Customizable FPGA Architecture Modelling}},
  year = {2020},
  issue_date = {June 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {13},
  number = {2},
  issn = {1936-7406},
  url = {https://doi.org/10.1145/3388617},
  doi = {10.1145/3388617},
  abstract = {Developing Field-programmable Gate Array (FPGA) architectures is challenging due to
the competing requirements of various application domains and changing manufacturing
process technology. This is compounded by the difficulty of fairly evaluating FPGA
architectural choices, which requires sophisticated high-quality Computer Aided Design
(CAD) tools to target each potential architecture. This article describes version
8.0 of the open source Verilog to Routing (VTR) project, which provides such a design
flow. VTR 8 expands the scope of FPGA architectures that can be modelled, allowing
VTR to target and model many details of both commercial and proposed FPGA architectures.
The VTR design flow also serves as a baseline for evaluating new CAD algorithms. It
is therefore important, for both CAD algorithm comparisons and the validity of architectural
conclusions, that VTR produce high-quality circuit implementations. VTR 8 significantly
improves optimization quality (reductions of 15% minimum routable channel width, 41%
wirelength, and 12% critical path delay), run-time (5.3\texttimes{} faster) and memory footprint
(3.3\texttimes{} lower). Finally, we demonstrate VTR is run-time and memory footprint efficient,
while producing circuit implementations of reasonable quality compared to highly-tuned
architecture-specific industrial toolsâ€”showing that architecture generality, good
implementation quality, and run-time efficiency are not mutually exclusive goals.},
  journal = {ACM Trans. Reconfigurable Technol. Syst.},
  month = may,
  articleno = {9},
  numpages = {55},
  keywords = {electronic design automation (EDA), Computer aided design (CAD), versatile place and route (VPR), verilog to routing (VTR), routing, placement, packing, field programmable gate array (FPGA)}
}

@InProceedings{kahng20,
  author={Kahng, Andrew B.},
  booktitle={2020 IFIP/IEEE 28th International Conference on Very Large Scale Integration (VLSI-SOC)},
  title={{Open-Source EDA: If We Build It, Who Will Come?}},
  year={2020},
  pages={1-6},
  doi={10.1109/VLSI-SOC46417.2020.9344073}
}

@Online{gha,
  author = {{GitHub}},
  year = {2019},
  title = {{GitHub Actions}},
  url = {https://github.com/features/actions}
}

@Online{gitlab-ci,
  author = {{GitLab}},
  title = {{GitLab CI/CD}},
  url = {https://docs.gitlab.com/ee/ci/}
}
